{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"LQ02DKnSgbAQ","executionInfo":{"status":"ok","timestamp":1676138329983,"user_tz":300,"elapsed":9035,"user":{"displayName":"uma maheswara rao meleti","userId":"16305935137347021824"}}},"outputs":[],"source":["\n","import os\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","import sklearn\n","import seaborn\n","import torch.nn as nn\n","import torch.nn.functional as F\n","from torch import optim\n","import torch\n","from torchvision import datasets\n","from torchvision.transforms import ToTensor\n","from torchvision import transforms\n","\n","from torch.utils.data import TensorDataset\n","from tqdm import tqdm\n","from torch.utils.tensorboard import SummaryWriter\n","from torch.utils.data import DataLoader\n","\n","import matplotlib.pyplot as plt\n","import random"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16160,"status":"ok","timestamp":1676138350397,"user":{"displayName":"uma maheswara rao meleti","userId":"16305935137347021824"},"user_tz":300},"id":"4MGqTXX7gi3l","outputId":"35c76718-739d-46bb-a776-c07ab57c0732"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"1Rzm5wpJgkhE","executionInfo":{"status":"ok","timestamp":1676138352929,"user_tz":300,"elapsed":131,"user":{"displayName":"uma maheswara rao meleti","userId":"16305935137347021824"}}},"outputs":[],"source":["def seed_all(n=1337):\n","  np.random.seed(n)\n","  torch.manual_seed(n)\n","  random.seed(n)\n","\n","seed_all(1211)"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"uL4wIAQig0i0","executionInfo":{"status":"ok","timestamp":1676138358110,"user_tz":300,"elapsed":129,"user":{"displayName":"uma maheswara rao meleti","userId":"16305935137347021824"}}},"outputs":[],"source":["class Trainer:\n","\n","    def __init__(self,\n","                 model: torch.nn.Module,\n","                 device: torch.device,\n","                 criterion: torch.nn.Module,\n","                 optimizer: torch.optim.Optimizer,\n","                 training_DataLoader: torch.utils.data.Dataset,\n","                 validation_DataLoader: None,\n","                 # lr_scheduler: torch.optim.lr_scheduler = None,\n","                 epochs: int = 100,\n","                 epoch: int = 0,\n","                 notebook: bool = False,\n","                 path2write: str = None,\n","                 save_best=False,\n","                 save_final=True,\n","                 save_interval=10,\n","                 checkpoint_start_epoch=50\n","                 ):\n","        self.model = model\n","        self.criterion = criterion\n","        self.optimizer = optimizer\n","        # self.lr_scheduler = lr_scheduler\n","        self.training_DataLoader = training_DataLoader\n","        self.validation_DataLoader = validation_DataLoader\n","        self.device = device\n","        self.epochs = epochs\n","        self.epoch = epoch\n","        self.notebook = notebook\n","        #             if self.notebook:\n","        #                 print('Notebook')\n","        #                 from tqdm.notebook import tqdm, trange\n","        #             else:\n","        #                 from tqdm import tqdm, trange\n","        self.path2write = path2write\n","        LOG_DIR = os.path.join(path2write, 'Log')  # path2write + 'Log/'\n","        self.writer_train = SummaryWriter(os.path.join(LOG_DIR, \"train\"))\n","        self.writer_val = SummaryWriter(os.path.join(LOG_DIR, \"val\"))\n","        self.check_point_path = os.path.join(path2write, 'check_points')\n","        if not os.path.exists(self.check_point_path):\n","            os.makedirs(self.check_point_path)\n","        self.save_best = save_best\n","        self.save_final = save_final\n","        self.save_interval = save_interval\n","        self.checkpoint_start_epoch = checkpoint_start_epoch\n","        self.training_loss = []\n","        self.validation_loss = []\n","        self.learning_rate = []\n","        self.training_accuracy = []\n","        self.validation_accuracy = []\n","\n","    def run_trainer(self):\n","        self.model.to(self.device)\n","        #         print(next(self.model.parameters()).device)\n","        if self.notebook:\n","            print('Notebook')\n","            from tqdm.notebook import tqdm, trange\n","        else:\n","            from tqdm import tqdm, trange\n","        #         print(self.epochs)\n","        progressbar = trange(self.epochs, desc='Progress', disable=True)  # don't show progressbar\n","        loss_max = None\n","        for epoch in progressbar:\n","            print(f'Epoch - {epoch}')\n","\n","            # Training Block\n","            train_loss, train_accuracy = self._train()\n","            self.writer_train.add_scalar(\"Train Loss\", train_loss, epoch)\n","            self.writer_train.add_scalar(\"Train Accuracy\", train_accuracy, epoch)\n","\n","\n","            # Val Block\n","            val_loss, val_accuracy = self._validate()\n","            self.writer_val.add_scalar(\"Val Loss\", val_loss, epoch)\n","            self.writer_val.add_scalar(\"Val Accuracy\", val_accuracy, epoch)\n","\n","            # lr\n","            self.writer_train.add_scalar(\"Learning Rate\", self.optimizer.param_groups[0]['lr'], epoch)\n","\n","            print('Epoch - {} Train Loss - {:.6f} Val Loss - {:.6f} Train Accuracy - {:.6f} Val Accuracy - {:.6f}'.format(epoch, train_loss, val_loss, train_accuracy, val_accuracy))\n","            if self.save_final:\n","                if epoch == self.epochs-1:\n","                    model_name = 'epoch-{}-loss{:.6f}'.format(epoch, val_loss)\n","                    torch.save(self.model.state_dict(), os.path.join(self.check_point_path, model_name))\n","            # if epoch == 0:\n","            #     loss_max = val_loss\n","            #     print(loss_max)\n","            #     pass\n","            # if self.save_best and epoch >= self.checkpoint_start_epoch:\n","            #     if val_loss < loss_max:  # loss decreased\n","            #         print('Saving Checkpoint at val loss dropped from {:.6f} -> {:.6f}'.format(loss_max, val_loss))\n","            #         model_name = 'epoch-{}-loss{:.6f}'.format(epoch, val_loss)\n","            #         # torch.save(self.model.state_dict(), os.path.join(self.check_point_path, model_name))\n","            # elif epoch % self.save_interval == 0:\n","            #     print('Saving Checkpoint Val loss - {:.6f}'.format(val_loss))\n","            #     model_name = 'epoch-{}-loss{:.6f}'.format(epoch, val_loss)\n","            #     torch.save(self.model.state_dict(), os.path.join(self.check_point_path, model_name))\n","            loss_max = val_loss\n","\n","        return self.training_loss, self.validation_loss, self.model, self.training_accuracy, self.validation_accuracy\n","\n","    def _train(self):\n","\n","        self.model.train()\n","        train_losses = []\n","        batch_iter = tqdm(enumerate(self.training_DataLoader), 'Training', total=len(self.training_DataLoader),\n","                          disable=False)\n","        batch_acc = 0\n","        for i, (x, y) in batch_iter:\n","            input, target = x.type(torch.float32).to(self.device), y.type(torch.float32).to(self.device)\n","            self.optimizer.zero_grad()\n","            target = target.type(torch.LongTensor).to(self.device)\n","            output = self.model(input)\n","            # target = target.unsqueeze(-1)\n","            # print('Target Shape - ', target.shape)\n","            # print('Output Shape - ', output.shape)\n","            loss = self.criterion(output, target)\n","            train_losses.append(loss.item())\n","            loss.backward()\n","            self.optimizer.step()\n","            pred = output.argmax(dim=1, keepdim=True) # max of prob\n","            pred = pred.flatten()\n","            # correct += pred.eq(target.view_as(pred)).sum().item() \n","            batch_acc += torch.mean(pred.eq(target.view_as(pred)).type(torch.FloatTensor))\n","            # batch_acc += (sum(pred.eq(target.view_as(pred)).type(torch.FloatTensor))/len(pred.eq(target.view_as(pred)).type(torch.FloatTensor)))\n","        accuracy = batch_acc/len(self.training_DataLoader)\n","        self.training_loss.append(np.mean(train_losses))  # Mean batch loss\n","        self.learning_rate.append(self.optimizer.param_groups[0]['lr'])\n","        self.training_accuracy.append(accuracy)\n","\n","        batch_iter.close()  # clean up the bar\n","        return np.mean(train_losses), accuracy\n","\n","    def _validate(self):\n","\n","        self.model.eval()\n","        valid_losses = []\n","        batch_iter = tqdm(enumerate(self.validation_DataLoader), 'validation', total=len(self.validation_DataLoader), disable=False)\n","        batch_acc = 0\n","        for i, (x, y) in batch_iter:\n","            input, target = x.type(torch.float32).to(self.device), y.to(self.device)\n","            with torch.no_grad():\n","                output = self.model(input)\n","                # target = target.unsqueeze(-1)\n","                target = target.type(torch.LongTensor).to(self.device)\n","                loss = self.criterion(output, target)\n","                valid_losses.append(loss.item())\n","                pred = output.argmax(dim=1, keepdim=True)\n","                # correct += pred.eq(target.view_as(pred)).sum().item()\n","                batch_acc += torch.mean(pred.eq(target.view_as(pred)).type(torch.FloatTensor)).item()\n","\n","        accuracy = batch_acc/len(self.validation_DataLoader)\n","        self.validation_loss.append(np.mean(valid_losses))\n","        self.validation_accuracy.append(accuracy)\n","        batch_iter.close()\n","        return np.mean(valid_losses), accuracy"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"klgTGCvYg4kE","executionInfo":{"status":"ok","timestamp":1676138363144,"user_tz":300,"elapsed":133,"user":{"displayName":"uma maheswara rao meleti","userId":"16305935137347021824"}}},"outputs":[],"source":["class CNN0(nn.Module):\n","  def __init__(self):\n","    super().__init__()\n","    self.conv1 = nn.Conv2d(1, 32, kernel_size=3, stride=1, padding=1) #op dim stays same #  (W - F + 2*P)/S + 1\n","    self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1) \n","\n","    self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2) # half of input\n","    self.pool2 = nn.MaxPool2d(kernel_size=2, stride=2)\n","\n","    self.dense1 = nn.Linear(64*7*7, 128) #(28/2/2) -> 7\n","    self.dense2 = nn.Linear(128, 10)\n","\n","\n","  def forward(self, x):\n","    x = self.conv1(x)\n","    x = F.relu(x)\n","    x = self.pool1(x)\n","    x = self.conv2(x)\n","    x = F.relu(x)\n","    x = self.pool2(x)\n","    x = x.view(x.shape[0], -1)\n","    x = self.dense1(x)\n","    x = self.dense2(x)\n","    output = F.log_softmax(x, dim=1)\n","    return output\n","\n","class CNN1(nn.Module):\n","  def __init__(self):\n","    super().__init__()\n","    \n","    self.conv1 = nn.Conv2d(1, 32, kernel_size=3, stride=1, padding=1)\n","    self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)\n","    self.conv3 = nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1)\n","\n","    self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2) # half of input\n","    self.pool2 = nn.MaxPool2d(kernel_size=2, stride=2)\n","\n","    self.dense1 = nn.Linear(128*7*7, 128)\n","    self.dense2 = nn.Linear(128, 10)\n","\n","  def forward(self, x):\n","    x = self.conv1(x)\n","    x = F.relu(x)\n","    x = self.pool1(x)\n","    x = self.conv2(x)\n","    x = F.relu(x)\n","    x = self.pool2(x)\n","    x = self.conv3(x)\n","    x = F.relu(x)\n","    x = x.view(x.shape[0], -1) #flatten the vector\n","    x = self.dense1(x)\n","    x = self.dense2(x)\n","    output = F.log_softmax(x, dim=1)\n","    return output\n","\n","class CNN2(nn.Module):\n","  def __init__(self):\n","    super().__init__()\n","    self.conv1 = nn.Conv2d(1, 32, kernel_size=3, stride=1, padding=1)\n","    self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2)\n","\n","    self.dense1 = nn.Linear(32*14*14, 128)\n","    self.dense2 = nn.Linear(128, 10)\n","\n","  def forward(self, x):\n","    x = self.conv1(x)\n","    x = F.relu(x)\n","    x = self.pool1(x)\n","    x = x.view(x.shape[0], -1)\n","    x = self.dense1(x)\n","    x = self.dense2(x)\n","    out = F.log_softmax(x)\n","    return out\n","\n","class DNN0(nn.Module): #for mnist\n","  def __init__(self):\n","    super().__init__()\n","    self.layer1 = nn.Conv2d(28*28, 64)\n","    self.layer2 = nn.Conv2d(64, 32)\n","    self.layer3 = nn.Conv2d(32, 16)\n","    self.layer4 = nn.Conv2d(16, 10)\n","\n","  def forward(self, x):\n","    x = self.layer1(x)\n","    x = self.layer2(x)\n","    x = self.layer3(x)\n","    x = self.layer4(x)\n","    out = F.log_softmax(x)\n","\n","    return out\n","\n","class DNN1(nn.Module): #for mnist\n","  def __init__(self):\n","    super().__init__()\n","    self.layer1 = nn.Conv2d(28*28, 32)\n","    self.layer2 = nn.Conv2d(32, 16)\n","    self.layer3 = nn.Conv2d(16, 10)\n","\n","  def forward(self, x):\n","    x = self.layer1(x)\n","    x = self.layer2(x)\n","    x = self.layer3(x)\n","    out = F.log_softmax(x)\n","\n","    return out\n","\n","class DNN2(nn.Module): #for mnist\n","  def __init__(self):\n","    super().__init__()\n","    self.layer1 = nn.Conv2d(28*28, 64)\n","    self.layer2 = nn.Conv2d(64, 32)\n","    self.layer3 = nn.Conv2d(32, 16)\n","    self.layer4 = nn.Conv2d(16, 10)\n","\n","  def forward(self, x):\n","    x = self.layer1(x)\n","    x = self.layer2(x)\n","    x = self.layer3(x)\n","    x = self.layer4(x)\n","    out = F.log_softmax(x)\n","\n","    return out\n","\n","\n"]},{"cell_type":"code","execution_count":9,"metadata":{"executionInfo":{"elapsed":269,"status":"ok","timestamp":1676138457440,"user":{"displayName":"uma maheswara rao meleti","userId":"16305935137347021824"},"user_tz":300},"id":"kW7JuX5fCZ-a"},"outputs":[],"source":["#dataset prepration\n","bath_size = 1024\n","\n","transform=transforms.Compose([\n","        transforms.ToTensor()\n","        ])\n","dataset1 = datasets.MNIST('../data', train=True, download=True, transform=transform)\n","dataset2 = datasets.MNIST('../data', train=False, transform=transform)\n","\n","training_DataLoader = DataLoader(dataset1, batch_size=bath_size, shuffle=True)\n","validation_DataLoader= DataLoader(dataset2, batch_size=bath_size, shuffle=True)"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"HAtGU5fZ0bqu","executionInfo":{"status":"ok","timestamp":1676138462512,"user_tz":300,"elapsed":133,"user":{"displayName":"uma maheswara rao meleti","userId":"16305935137347021824"}}},"outputs":[],"source":["gpu_id = 0\n","loss_fn = nn.CrossEntropyLoss()\n","lr = 1e-4\n","epochs =  50\n","notebook = True\n","checkpoint_start_epoch = 5 #Not using\n","path2write = \"drive/MyDrive/DL_homework/HW1_1/CNN/\""]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":457793,"status":"ok","timestamp":1676138921405,"user":{"displayName":"uma maheswara rao meleti","userId":"16305935137347021824"},"user_tz":300},"id":"KOxhx3bdEKrc","outputId":"e7783f13-c0af-48d9-d36e-b70d8544419d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Notebook\n","Epoch - 0\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:15<00:00,  3.93it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.34it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 0 Train Loss - 1.845477 Val Loss - 1.126090 Train Accuracy - 0.603142 Val Accuracy - 0.793991\n","Epoch - 1\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  8.01it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  7.21it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 1 Train Loss - 0.712288 Val Loss - 0.453712 Train Accuracy - 0.833260 Val Accuracy - 0.887484\n","Epoch - 2\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.61it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.24it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 2 Train Loss - 0.394365 Val Loss - 0.323164 Train Accuracy - 0.892577 Val Accuracy - 0.914862\n","Epoch - 3\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.13it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.22it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 3 Train Loss - 0.303478 Val Loss - 0.261083 Train Accuracy - 0.914700 Val Accuracy - 0.928276\n","Epoch - 4\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.89it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  6.95it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 4 Train Loss - 0.254110 Val Loss - 0.222550 Train Accuracy - 0.927855 Val Accuracy - 0.938927\n","Epoch - 5\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.56it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.52it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 5 Train Loss - 0.220692 Val Loss - 0.190084 Train Accuracy - 0.936778 Val Accuracy - 0.947272\n","Epoch - 6\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.17it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.28it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 6 Train Loss - 0.192482 Val Loss - 0.168816 Train Accuracy - 0.944659 Val Accuracy - 0.950975\n","Epoch - 7\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.59it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  6.95it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 7 Train Loss - 0.171826 Val Loss - 0.151638 Train Accuracy - 0.950668 Val Accuracy - 0.957976\n","Epoch - 8\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.78it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.83it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 8 Train Loss - 0.153384 Val Loss - 0.134337 Train Accuracy - 0.955327 Val Accuracy - 0.962075\n","Epoch - 9\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.08it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.72it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 9 Train Loss - 0.138269 Val Loss - 0.118443 Train Accuracy - 0.959971 Val Accuracy - 0.966155\n","Epoch - 10\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.39it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  6.75it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 10 Train Loss - 0.124393 Val Loss - 0.105659 Train Accuracy - 0.964044 Val Accuracy - 0.968664\n","Epoch - 11\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.99it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.15it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 11 Train Loss - 0.113646 Val Loss - 0.098101 Train Accuracy - 0.966951 Val Accuracy - 0.971961\n","Epoch - 12\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.26it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.09it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 12 Train Loss - 0.104200 Val Loss - 0.089128 Train Accuracy - 0.970009 Val Accuracy - 0.974131\n","Epoch - 13\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.53it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  6.88it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 13 Train Loss - 0.097014 Val Loss - 0.082949 Train Accuracy - 0.972140 Val Accuracy - 0.975311\n","Epoch - 14\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  8.02it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  8.78it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 14 Train Loss - 0.091124 Val Loss - 0.076332 Train Accuracy - 0.973662 Val Accuracy - 0.978284\n","Epoch - 15\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.18it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.96it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 15 Train Loss - 0.085432 Val Loss - 0.073922 Train Accuracy - 0.975040 Val Accuracy - 0.978113\n","Epoch - 16\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.33it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  7.89it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 16 Train Loss - 0.080790 Val Loss - 0.070635 Train Accuracy - 0.976835 Val Accuracy - 0.978504\n","Epoch - 17\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  8.00it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.79it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 17 Train Loss - 0.076762 Val Loss - 0.066358 Train Accuracy - 0.977818 Val Accuracy - 0.979735\n","Epoch - 18\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.14it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.99it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 18 Train Loss - 0.073172 Val Loss - 0.063853 Train Accuracy - 0.979041 Val Accuracy - 0.980343\n","Epoch - 19\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.28it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  8.34it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 19 Train Loss - 0.069387 Val Loss - 0.059874 Train Accuracy - 0.979899 Val Accuracy - 0.981627\n","Epoch - 20\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  8.14it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.01it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 20 Train Loss - 0.067111 Val Loss - 0.058233 Train Accuracy - 0.980703 Val Accuracy - 0.981388\n","Epoch - 21\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.24it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.99it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 21 Train Loss - 0.064753 Val Loss - 0.056456 Train Accuracy - 0.981342 Val Accuracy - 0.982980\n","Epoch - 22\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.29it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  8.60it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 22 Train Loss - 0.062615 Val Loss - 0.055216 Train Accuracy - 0.981239 Val Accuracy - 0.982687\n","Epoch - 23\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.89it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.94it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 23 Train Loss - 0.060432 Val Loss - 0.052915 Train Accuracy - 0.982059 Val Accuracy - 0.983761\n","Epoch - 24\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.08it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.87it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 24 Train Loss - 0.058882 Val Loss - 0.051050 Train Accuracy - 0.982496 Val Accuracy - 0.984204\n","Epoch - 25\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.16it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.03it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 25 Train Loss - 0.056668 Val Loss - 0.052898 Train Accuracy - 0.983573 Val Accuracy - 0.983490\n","Epoch - 26\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  8.06it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.07it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 26 Train Loss - 0.055044 Val Loss - 0.049877 Train Accuracy - 0.983778 Val Accuracy - 0.984182\n","Epoch - 27\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.11it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.85it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 27 Train Loss - 0.053642 Val Loss - 0.047862 Train Accuracy - 0.984180 Val Accuracy - 0.984241\n","Epoch - 28\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.16it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.97it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 28 Train Loss - 0.052474 Val Loss - 0.046993 Train Accuracy - 0.984338 Val Accuracy - 0.984513\n","Epoch - 29\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.78it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.10it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 29 Train Loss - 0.051219 Val Loss - 0.046861 Train Accuracy - 0.984824 Val Accuracy - 0.984993\n","Epoch - 30\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.11it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.27it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 30 Train Loss - 0.049776 Val Loss - 0.046193 Train Accuracy - 0.985376 Val Accuracy - 0.984865\n","Epoch - 31\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.20it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.91it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 31 Train Loss - 0.048750 Val Loss - 0.045537 Train Accuracy - 0.985565 Val Accuracy - 0.985473\n","Epoch - 32\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  8.10it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.85it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 32 Train Loss - 0.047682 Val Loss - 0.044182 Train Accuracy - 0.985839 Val Accuracy - 0.985278\n","Epoch - 33\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.20it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.05it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 33 Train Loss - 0.046355 Val Loss - 0.042431 Train Accuracy - 0.986217 Val Accuracy - 0.986127\n","Epoch - 34\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.00it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.93it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 34 Train Loss - 0.045847 Val Loss - 0.042026 Train Accuracy - 0.986735 Val Accuracy - 0.986743\n","Epoch - 35\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  8.08it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  8.51it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 35 Train Loss - 0.044220 Val Loss - 0.042614 Train Accuracy - 0.986906 Val Accuracy - 0.985676\n","Epoch - 36\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.25it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.53it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 36 Train Loss - 0.043407 Val Loss - 0.042215 Train Accuracy - 0.987203 Val Accuracy - 0.986029\n","Epoch - 37\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.11it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.03it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 37 Train Loss - 0.042495 Val Loss - 0.041080 Train Accuracy - 0.987662 Val Accuracy - 0.986412\n","Epoch - 38\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  8.04it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  8.21it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 38 Train Loss - 0.042186 Val Loss - 0.042106 Train Accuracy - 0.987948 Val Accuracy - 0.986045\n","Epoch - 39\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.13it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.93it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 39 Train Loss - 0.040986 Val Loss - 0.039607 Train Accuracy - 0.988153 Val Accuracy - 0.986195\n","Epoch - 40\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.19it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.26it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 40 Train Loss - 0.039739 Val Loss - 0.040453 Train Accuracy - 0.988290 Val Accuracy - 0.986119\n","Epoch - 41\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.97it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  7.41it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 41 Train Loss - 0.039356 Val Loss - 0.040785 Train Accuracy - 0.988406 Val Accuracy - 0.986007\n","Epoch - 42\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.40it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.74it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 42 Train Loss - 0.038423 Val Loss - 0.039064 Train Accuracy - 0.988544 Val Accuracy - 0.986352\n","Epoch - 43\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.11it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.74it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 43 Train Loss - 0.038169 Val Loss - 0.039326 Train Accuracy - 0.988649 Val Accuracy - 0.985985\n","Epoch - 44\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.75it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  6.72it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 44 Train Loss - 0.037346 Val Loss - 0.038350 Train Accuracy - 0.989321 Val Accuracy - 0.986577\n","Epoch - 45\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.54it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.31it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 45 Train Loss - 0.036730 Val Loss - 0.038512 Train Accuracy - 0.989410 Val Accuracy - 0.986420\n","Epoch - 46\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.17it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.29it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 46 Train Loss - 0.036045 Val Loss - 0.037996 Train Accuracy - 0.989482 Val Accuracy - 0.986360\n","Epoch - 47\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.87it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  7.04it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 47 Train Loss - 0.035778 Val Loss - 0.039074 Train Accuracy - 0.989498 Val Accuracy - 0.986810\n","Epoch - 48\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.64it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.94it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 48 Train Loss - 0.035182 Val Loss - 0.038160 Train Accuracy - 0.989550 Val Accuracy - 0.986840\n","Epoch - 49\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.14it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  8.54it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 49 Train Loss - 0.034598 Val Loss - 0.037013 Train Accuracy - 0.989791 Val Accuracy - 0.987073\n"]}],"source":["model0 = CNN0()\n","optimizer = torch.optim.Adam(model0.parameters(), lr = lr)\n","trainer = Trainer(model=model0,\n","                      device=gpu_id,\n","                      criterion=loss_fn,\n","                      optimizer=optimizer,\n","                      training_DataLoader=training_DataLoader,\n","                      validation_DataLoader=validation_DataLoader,\n","                      # lr_scheduler=lr_scheduler,\n","                      epochs=epochs,\n","                      epoch=0,\n","                      notebook=True,\n","                      path2write= path2write,\n","                      checkpoint_start_epoch=checkpoint_start_epoch )\n","training_loss0, validation_loss0, model0, training_accuracy0, validation_accuracy0 = trainer.run_trainer()"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":477612,"status":"ok","timestamp":1676139399138,"user":{"displayName":"uma maheswara rao meleti","userId":"16305935137347021824"},"user_tz":300},"id":"GpwXXxrEnInW","outputId":"601c1241-dad6-4572-ab2d-0928116cc8bf"},"outputs":[{"output_type":"stream","name":"stdout","text":["Notebook\n","Epoch - 0\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.20it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  6.73it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 0 Train Loss - 1.668501 Val Loss - 0.712506 Train Accuracy - 0.608572 Val Accuracy - 0.811262\n","Epoch - 1\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.41it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.54it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 1 Train Loss - 0.508994 Val Loss - 0.381240 Train Accuracy - 0.851294 Val Accuracy - 0.888429\n","Epoch - 2\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.86it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.85it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 2 Train Loss - 0.352550 Val Loss - 0.302978 Train Accuracy - 0.895722 Val Accuracy - 0.912584\n","Epoch - 3\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.80it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.70it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 3 Train Loss - 0.291593 Val Loss - 0.253713 Train Accuracy - 0.912856 Val Accuracy - 0.925686\n","Epoch - 4\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.40it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  8.23it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 4 Train Loss - 0.247882 Val Loss - 0.209693 Train Accuracy - 0.925834 Val Accuracy - 0.938716\n","Epoch - 5\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.91it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.73it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 5 Train Loss - 0.207272 Val Loss - 0.176116 Train Accuracy - 0.937839 Val Accuracy - 0.946100\n","Epoch - 6\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.80it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.41it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 6 Train Loss - 0.174383 Val Loss - 0.146707 Train Accuracy - 0.948010 Val Accuracy - 0.956083\n","Epoch - 7\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.15it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  6.60it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 7 Train Loss - 0.147627 Val Loss - 0.122355 Train Accuracy - 0.955981 Val Accuracy - 0.963518\n","Epoch - 8\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.38it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.64it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 8 Train Loss - 0.127540 Val Loss - 0.104736 Train Accuracy - 0.962303 Val Accuracy - 0.967184\n","Epoch - 9\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.70it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.81it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 9 Train Loss - 0.112018 Val Loss - 0.092799 Train Accuracy - 0.967068 Val Accuracy - 0.972158\n","Epoch - 10\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.80it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.62it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 10 Train Loss - 0.100203 Val Loss - 0.084282 Train Accuracy - 0.970565 Val Accuracy - 0.975761\n","Epoch - 11\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.52it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  8.01it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 11 Train Loss - 0.091933 Val Loss - 0.078531 Train Accuracy - 0.972832 Val Accuracy - 0.976108\n","Epoch - 12\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.91it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.61it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 12 Train Loss - 0.084497 Val Loss - 0.070478 Train Accuracy - 0.975229 Val Accuracy - 0.979502\n","Epoch - 13\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.81it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.45it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 13 Train Loss - 0.078692 Val Loss - 0.066169 Train Accuracy - 0.976977 Val Accuracy - 0.980419\n","Epoch - 14\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.98it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  6.85it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 14 Train Loss - 0.074241 Val Loss - 0.063115 Train Accuracy - 0.978479 Val Accuracy - 0.980959\n","Epoch - 15\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.59it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.88it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 15 Train Loss - 0.069921 Val Loss - 0.057128 Train Accuracy - 0.978816 Val Accuracy - 0.982709\n","Epoch - 16\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.96it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.88it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 16 Train Loss - 0.064912 Val Loss - 0.054695 Train Accuracy - 0.981079 Val Accuracy - 0.982237\n","Epoch - 17\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.84it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.67it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 17 Train Loss - 0.063031 Val Loss - 0.054023 Train Accuracy - 0.981055 Val Accuracy - 0.982868\n","Epoch - 18\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.54it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  8.90it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 18 Train Loss - 0.059450 Val Loss - 0.049752 Train Accuracy - 0.982596 Val Accuracy - 0.984887\n","Epoch - 19\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.77it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.77it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 19 Train Loss - 0.056758 Val Loss - 0.047327 Train Accuracy - 0.982945 Val Accuracy - 0.983821\n","Epoch - 20\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.83it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.65it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 20 Train Loss - 0.053784 Val Loss - 0.044615 Train Accuracy - 0.984428 Val Accuracy - 0.986352\n","Epoch - 21\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.37it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  6.74it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 21 Train Loss - 0.051396 Val Loss - 0.046837 Train Accuracy - 0.985140 Val Accuracy - 0.984692\n","Epoch - 22\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.43it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.99it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 22 Train Loss - 0.050136 Val Loss - 0.043381 Train Accuracy - 0.984935 Val Accuracy - 0.985128\n","Epoch - 23\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.89it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.21it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 23 Train Loss - 0.048292 Val Loss - 0.040745 Train Accuracy - 0.985862 Val Accuracy - 0.986352\n","Epoch - 24\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.98it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  8.12it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 24 Train Loss - 0.046283 Val Loss - 0.041883 Train Accuracy - 0.986226 Val Accuracy - 0.985834\n","Epoch - 25\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.39it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.56it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 25 Train Loss - 0.044540 Val Loss - 0.040171 Train Accuracy - 0.987253 Val Accuracy - 0.986089\n","Epoch - 26\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.83it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.79it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 26 Train Loss - 0.042722 Val Loss - 0.039377 Train Accuracy - 0.986977 Val Accuracy - 0.985505\n","Epoch - 27\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.72it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.77it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 27 Train Loss - 0.041800 Val Loss - 0.038459 Train Accuracy - 0.987696 Val Accuracy - 0.986968\n","Epoch - 28\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.45it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  6.83it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 28 Train Loss - 0.041575 Val Loss - 0.036734 Train Accuracy - 0.987766 Val Accuracy - 0.987066\n","Epoch - 29\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.21it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.78it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 29 Train Loss - 0.038991 Val Loss - 0.036057 Train Accuracy - 0.988361 Val Accuracy - 0.986900\n","Epoch - 30\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.66it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.50it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 30 Train Loss - 0.038169 Val Loss - 0.036933 Train Accuracy - 0.988555 Val Accuracy - 0.986840\n","Epoch - 31\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.84it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  8.47it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 31 Train Loss - 0.036540 Val Loss - 0.035475 Train Accuracy - 0.989195 Val Accuracy - 0.987502\n","Epoch - 32\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.51it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.58it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 32 Train Loss - 0.036994 Val Loss - 0.034605 Train Accuracy - 0.989075 Val Accuracy - 0.987358\n","Epoch - 33\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.88it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.82it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 33 Train Loss - 0.035438 Val Loss - 0.032734 Train Accuracy - 0.989741 Val Accuracy - 0.988140\n","Epoch - 34\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.81it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  8.38it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 34 Train Loss - 0.034312 Val Loss - 0.034960 Train Accuracy - 0.989780 Val Accuracy - 0.987562\n","Epoch - 35\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.40it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  6.75it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 35 Train Loss - 0.033063 Val Loss - 0.032429 Train Accuracy - 0.990249 Val Accuracy - 0.988253\n","Epoch - 36\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.24it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.96it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 36 Train Loss - 0.031875 Val Loss - 0.030259 Train Accuracy - 0.990795 Val Accuracy - 0.989078\n","Epoch - 37\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.85it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.73it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 37 Train Loss - 0.030921 Val Loss - 0.031805 Train Accuracy - 0.991270 Val Accuracy - 0.987952\n","Epoch - 38\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.93it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  7.64it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 38 Train Loss - 0.030095 Val Loss - 0.029979 Train Accuracy - 0.990977 Val Accuracy - 0.989515\n","Epoch - 39\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.59it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.47it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 39 Train Loss - 0.030194 Val Loss - 0.030988 Train Accuracy - 0.991309 Val Accuracy - 0.989146\n","Epoch - 40\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.57it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.06it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 40 Train Loss - 0.029665 Val Loss - 0.031571 Train Accuracy - 0.991088 Val Accuracy - 0.989222\n","Epoch - 41\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.80it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.51it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 41 Train Loss - 0.027964 Val Loss - 0.029246 Train Accuracy - 0.991834 Val Accuracy - 0.989005\n","Epoch - 42\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.31it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  6.87it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 42 Train Loss - 0.027683 Val Loss - 0.032203 Train Accuracy - 0.991862 Val Accuracy - 0.989808\n","Epoch - 43\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.16it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.53it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 43 Train Loss - 0.026598 Val Loss - 0.030453 Train Accuracy - 0.992159 Val Accuracy - 0.989214\n","Epoch - 44\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.80it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.59it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 44 Train Loss - 0.026608 Val Loss - 0.030520 Train Accuracy - 0.992242 Val Accuracy - 0.989680\n","Epoch - 45\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:09<00:00,  6.48it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  5.90it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 45 Train Loss - 0.025454 Val Loss - 0.029418 Train Accuracy - 0.992727 Val Accuracy - 0.990220\n","Epoch - 46\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  7.06it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.62it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 46 Train Loss - 0.024266 Val Loss - 0.030757 Train Accuracy - 0.993124 Val Accuracy - 0.989447\n","Epoch - 47\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.74it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.79it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 47 Train Loss - 0.024639 Val Loss - 0.028208 Train Accuracy - 0.993129 Val Accuracy - 0.990581\n","Epoch - 48\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:08<00:00,  6.86it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  9.51it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 48 Train Loss - 0.024335 Val Loss - 0.027797 Train Accuracy - 0.993036 Val Accuracy - 0.990776\n","Epoch - 49\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.45it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  6.88it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch - 49 Train Loss - 0.023405 Val Loss - 0.027698 Train Accuracy - 0.993250 Val Accuracy - 0.990844\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}],"source":["model1 = CNN1()\n","optimizer = torch.optim.Adam(model1.parameters(), lr = lr)\n","trainer = Trainer(model=model1,\n","                      device=gpu_id,\n","                      criterion=loss_fn,\n","                      optimizer=optimizer,\n","                      training_DataLoader=training_DataLoader,\n","                      validation_DataLoader=validation_DataLoader,\n","                      # lr_scheduler=lr_scheduler,\n","                      epochs=epochs,\n","                      epoch=0,\n","                      notebook=True,\n","                      path2write= path2write,\n","                      checkpoint_start_epoch=checkpoint_start_epoch )\n","training_loss1, validation_loss1, model1, training_accuracy1, validation_accuracy1 = trainer.run_trainer()"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":403586,"status":"ok","timestamp":1676139802706,"user":{"displayName":"uma maheswara rao meleti","userId":"16305935137347021824"},"user_tz":300},"id":"e8ryhzm7q7A8","outputId":"38f62d0d-3164-456d-f489-31a6ae87a8cc"},"outputs":[{"output_type":"stream","name":"stdout","text":["Notebook\n","Epoch - 0\n"]},{"output_type":"stream","name":"stderr","text":["Training:   0%|          | 0/59 [00:00<?, ?it/s]<ipython-input-5-a45000c9841c>:72: UserWarning: Implicit dimension choice for log_softmax has been deprecated. Change the call to include dim=X as an argument.\n","  out = F.log_softmax(x)\n","Training: 100%|██████████| 59/59 [00:07<00:00,  8.34it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.33it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 0 Train Loss - 2.299737 Val Loss - 2.299107 Train Accuracy - 0.088335 Val Accuracy - 0.088006\n","Epoch - 1\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.97it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.56it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 1 Train Loss - 2.299726 Val Loss - 2.299279 Train Accuracy - 0.088448 Val Accuracy - 0.087349\n","Epoch - 2\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  9.18it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.40it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 2 Train Loss - 2.299741 Val Loss - 2.299243 Train Accuracy - 0.088267 Val Accuracy - 0.087349\n","Epoch - 3\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.92it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.57it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 3 Train Loss - 2.299691 Val Loss - 2.299111 Train Accuracy - 0.088493 Val Accuracy - 0.087618\n","Epoch - 4\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  9.06it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  7.07it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 4 Train Loss - 2.299739 Val Loss - 2.299118 Train Accuracy - 0.088392 Val Accuracy - 0.087976\n","Epoch - 5\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  8.60it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.30it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 5 Train Loss - 2.299724 Val Loss - 2.299049 Train Accuracy - 0.088267 Val Accuracy - 0.087767\n","Epoch - 6\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.70it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.07it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 6 Train Loss - 2.299703 Val Loss - 2.299222 Train Accuracy - 0.088471 Val Accuracy - 0.087588\n","Epoch - 7\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  9.28it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.58it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 7 Train Loss - 2.299744 Val Loss - 2.299078 Train Accuracy - 0.088392 Val Accuracy - 0.087797\n","Epoch - 8\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  8.00it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.45it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 8 Train Loss - 2.299714 Val Loss - 2.299132 Train Accuracy - 0.088403 Val Accuracy - 0.087438\n","Epoch - 9\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  8.99it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  7.17it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 9 Train Loss - 2.299698 Val Loss - 2.299220 Train Accuracy - 0.088471 Val Accuracy - 0.087707\n","Epoch - 10\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  8.28it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.35it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 10 Train Loss - 2.299694 Val Loss - 2.299186 Train Accuracy - 0.088414 Val Accuracy - 0.087827\n","Epoch - 11\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.99it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.66it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 11 Train Loss - 2.299716 Val Loss - 2.299169 Train Accuracy - 0.088346 Val Accuracy - 0.087707\n","Epoch - 12\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  9.36it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.59it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 12 Train Loss - 2.299731 Val Loss - 2.299104 Train Accuracy - 0.088290 Val Accuracy - 0.088156\n","Epoch - 13\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.90it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.48it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 13 Train Loss - 2.299710 Val Loss - 2.299196 Train Accuracy - 0.088380 Val Accuracy - 0.087378\n","Epoch - 14\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  8.85it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  7.22it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 14 Train Loss - 2.299728 Val Loss - 2.299185 Train Accuracy - 0.088471 Val Accuracy - 0.087378\n","Epoch - 15\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  8.46it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.54it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 15 Train Loss - 2.299718 Val Loss - 2.299098 Train Accuracy - 0.088426 Val Accuracy - 0.087707\n","Epoch - 16\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.81it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.63it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 16 Train Loss - 2.299687 Val Loss - 2.299074 Train Accuracy - 0.088448 Val Accuracy - 0.088066\n","Epoch - 17\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  9.24it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.70it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 17 Train Loss - 2.299737 Val Loss - 2.299117 Train Accuracy - 0.088267 Val Accuracy - 0.087827\n","Epoch - 18\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.96it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.55it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 18 Train Loss - 2.299703 Val Loss - 2.299066 Train Accuracy - 0.088426 Val Accuracy - 0.087827\n","Epoch - 19\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  9.17it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  7.09it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 19 Train Loss - 2.299710 Val Loss - 2.299128 Train Accuracy - 0.088346 Val Accuracy - 0.087737\n","Epoch - 20\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  8.50it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.32it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 20 Train Loss - 2.299688 Val Loss - 2.299091 Train Accuracy - 0.088561 Val Accuracy - 0.087618\n","Epoch - 21\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.90it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.65it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 21 Train Loss - 2.299718 Val Loss - 2.299066 Train Accuracy - 0.088392 Val Accuracy - 0.088275\n","Epoch - 22\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  9.15it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.44it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 22 Train Loss - 2.299713 Val Loss - 2.299183 Train Accuracy - 0.088380 Val Accuracy - 0.087109\n","Epoch - 23\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  8.02it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.50it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 23 Train Loss - 2.299681 Val Loss - 2.299126 Train Accuracy - 0.088539 Val Accuracy - 0.087707\n","Epoch - 24\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  9.00it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  7.17it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 24 Train Loss - 2.299718 Val Loss - 2.299147 Train Accuracy - 0.088493 Val Accuracy - 0.087946\n","Epoch - 25\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  8.50it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.39it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 25 Train Loss - 2.299717 Val Loss - 2.299127 Train Accuracy - 0.088358 Val Accuracy - 0.087558\n","Epoch - 26\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.79it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.25it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 26 Train Loss - 2.299716 Val Loss - 2.299090 Train Accuracy - 0.088414 Val Accuracy - 0.087857\n","Epoch - 27\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  9.19it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.73it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 27 Train Loss - 2.299728 Val Loss - 2.299158 Train Accuracy - 0.088290 Val Accuracy - 0.087647\n","Epoch - 28\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.97it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.72it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 28 Train Loss - 2.299721 Val Loss - 2.299206 Train Accuracy - 0.088335 Val Accuracy - 0.087558\n","Epoch - 29\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  8.99it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  7.23it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 29 Train Loss - 2.299704 Val Loss - 2.299300 Train Accuracy - 0.088527 Val Accuracy - 0.087378\n","Epoch - 30\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  8.48it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.56it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 30 Train Loss - 2.299740 Val Loss - 2.299150 Train Accuracy - 0.088312 Val Accuracy - 0.087647\n","Epoch - 31\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.79it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.03it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 31 Train Loss - 2.299728 Val Loss - 2.299172 Train Accuracy - 0.088505 Val Accuracy - 0.087438\n","Epoch - 32\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  9.02it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.32it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 32 Train Loss - 2.299681 Val Loss - 2.299113 Train Accuracy - 0.088448 Val Accuracy - 0.087677\n","Epoch - 33\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.75it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.33it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 33 Train Loss - 2.299696 Val Loss - 2.299121 Train Accuracy - 0.088448 Val Accuracy - 0.087438\n","Epoch - 34\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  8.78it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  7.33it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 34 Train Loss - 2.299672 Val Loss - 2.299268 Train Accuracy - 0.088403 Val Accuracy - 0.087498\n","Epoch - 35\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  8.58it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.53it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 35 Train Loss - 2.299710 Val Loss - 2.299099 Train Accuracy - 0.088369 Val Accuracy - 0.087946\n","Epoch - 36\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.69it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.30it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 36 Train Loss - 2.299738 Val Loss - 2.299143 Train Accuracy - 0.088369 Val Accuracy - 0.087468\n","Epoch - 37\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  9.07it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.50it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 37 Train Loss - 2.299711 Val Loss - 2.299180 Train Accuracy - 0.088346 Val Accuracy - 0.087737\n","Epoch - 38\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.92it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.70it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 38 Train Loss - 2.299669 Val Loss - 2.299122 Train Accuracy - 0.088550 Val Accuracy - 0.087827\n","Epoch - 39\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  8.76it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  7.11it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 39 Train Loss - 2.299720 Val Loss - 2.299173 Train Accuracy - 0.088346 Val Accuracy - 0.087767\n","Epoch - 40\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  8.69it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.56it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 40 Train Loss - 2.299728 Val Loss - 2.299093 Train Accuracy - 0.088437 Val Accuracy - 0.087827\n","Epoch - 41\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.70it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.65it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 41 Train Loss - 2.299711 Val Loss - 2.299109 Train Accuracy - 0.088358 Val Accuracy - 0.087498\n","Epoch - 42\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  9.13it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.41it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 42 Train Loss - 2.299696 Val Loss - 2.299137 Train Accuracy - 0.088527 Val Accuracy - 0.087677\n","Epoch - 43\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.88it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.56it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 43 Train Loss - 2.299717 Val Loss - 2.299161 Train Accuracy - 0.088426 Val Accuracy - 0.087647\n","Epoch - 44\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  8.50it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  7.06it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 44 Train Loss - 2.299674 Val Loss - 2.299190 Train Accuracy - 0.088595 Val Accuracy - 0.087647\n","Epoch - 45\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  8.77it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.38it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 45 Train Loss - 2.299713 Val Loss - 2.299191 Train Accuracy - 0.088358 Val Accuracy - 0.087767\n","Epoch - 46\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.75it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.40it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 46 Train Loss - 2.299753 Val Loss - 2.299101 Train Accuracy - 0.088335 Val Accuracy - 0.087707\n","Epoch - 47\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  9.13it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.66it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 47 Train Loss - 2.299743 Val Loss - 2.299205 Train Accuracy - 0.088346 Val Accuracy - 0.087588\n","Epoch - 48\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:07<00:00,  7.88it/s]\n","validation: 100%|██████████| 10/10 [00:00<00:00, 10.37it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch - 48 Train Loss - 2.299687 Val Loss - 2.299180 Train Accuracy - 0.088505 Val Accuracy - 0.087558\n","Epoch - 49\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 59/59 [00:06<00:00,  8.50it/s]\n","validation: 100%|██████████| 10/10 [00:01<00:00,  7.07it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch - 49 Train Loss - 2.299739 Val Loss - 2.299015 Train Accuracy - 0.088493 Val Accuracy - 0.087946\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}],"source":["model2 = CNN2()\n","optimizer = torch.optim.Adam(model1.parameters(), lr = lr)\n","trainer = Trainer(model=model2,\n","                      device=gpu_id,\n","                      criterion=loss_fn,\n","                      optimizer=optimizer,\n","                      training_DataLoader=training_DataLoader,\n","                      validation_DataLoader=validation_DataLoader,\n","                      # lr_scheduler=lr_scheduler,\n","                      epochs=epochs,\n","                      epoch=0,\n","                      notebook=True,\n","                      path2write= path2write,\n","                      checkpoint_start_epoch=checkpoint_start_epoch )\n","training_loss2, validation_loss2, model2, training_accuracy2, validation_accuracy2 = trainer.run_trainer()"]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":879},"executionInfo":{"elapsed":836,"status":"ok","timestamp":1676141143350,"user":{"displayName":"uma maheswara rao meleti","userId":"16305935137347021824"},"user_tz":300},"id":"HvXPegUVmIdn","outputId":"ba46dcc1-40a7-4820-9c2b-368e5f0c5a16"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x1080 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# plt.figure(figsize=(15, 15))\n","fig = plt.figure(figsize=(15, 15))\n","\n","ax1 = fig.add_subplot(1,1,1)\n","ax1.plot(training_loss0, 'b-', label='CNN0')\n","ax1.plot(training_loss1, 'c-', label='CNN1')\n","ax1.plot(training_loss2, 'r-', label='CNN2')\n","ax1.legend()\n","ax1.set_title('Training Loss')\n","\n","plt.show()\n","fig.savefig(os.path.join(path2write, 'loss.png'))\n","\n","\n"]},{"cell_type":"code","execution_count":18,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":879},"executionInfo":{"elapsed":621,"status":"ok","timestamp":1676141149247,"user":{"displayName":"uma maheswara rao meleti","userId":"16305935137347021824"},"user_tz":300},"id":"132e-EE0seDV","outputId":"d7e5a668-6e25-456f-f93f-40c3fab6fbd8"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x1080 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["fig = plt.figure(figsize=(15, 15))\n","\n","ax1 = fig.add_subplot(1,1,1)\n","ax1.plot(training_accuracy0, 'b-', label='CNN0')\n","ax1.plot(training_accuracy1, 'c-', label='CNN1')\n","ax1.plot(training_accuracy2, 'r-', label='CNN2')\n","ax1.legend()\n","ax1.set_title('Training Loss')\n","\n","plt.show()\n","fig.savefig(os.path.join(path2write, 'Accuracy.png'))"]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[]},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}